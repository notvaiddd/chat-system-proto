# storage/database.py

import os
import psycopg2
from psycopg2 import OperationalError
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

class Database:
    """
    A service for interacting with a PostgreSQL database.
    """
    def __init__(self):
        """
        Initializes the database connection using credentials from environment variables.
        """
        self.conn = None
        try:
            db_host = os.getenv("DB_HOST")

            # --- New Error Handling ---
            # Check if the user accidentally put the full connection string in the DB_HOST variable.
            if db_host and "://" in db_host:
                print("--- CONFIGURATION ERROR ---")
                print(f"The DB_HOST environment variable looks like a full URL ('{db_host}').")
                print("It should only be the hostname (e.g., 'localhost').")
                print("Please check your .env file and separate the credentials into DB_HOST, DB_PORT, DB_NAME, etc.")
                print("---------------------------")
                raise ValueError("Incorrect DB_HOST format in .env file.")

            # Connect to the PostgreSQL database
            self.conn = psycopg2.connect(
                host=db_host,
                port=os.getenv("DB_PORT"),
                dbname=os.getenv("DB_NAME"),
                user=os.getenv("DB_USER"),
                password=os.getenv("DB_PASSWORD")
            )
            print(f"Successfully connected to PostgreSQL database: {os.getenv('DB_NAME')}")
            self._create_initial_tables()
        except (OperationalError, ValueError) as e:
            print(f"Error connecting to PostgreSQL database: {e}")
            # Exit or handle the error appropriately if the database connection is critical
            self.conn = None

    def _create_initial_tables(self):
        """
        Creates the necessary tables if they don't already exist.
        """
        if not self.conn:
            print("Cannot create tables, no database connection.")
            return

        create_table_sql = """
        CREATE TABLE IF NOT EXISTS conversations (
            id SERIAL PRIMARY KEY,
            user_id VARCHAR(255) NOT NULL,
            prompt TEXT NOT NULL,
            response TEXT,
            timestamp TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
        );
        """
        try:
            with self.conn.cursor() as cursor:
                cursor.execute(create_table_sql)
                self.conn.commit()
                print("'conversations' table created or already exists.")
        except Exception as e:
            print(f"Error creating table: {e}")

    def log_conversation(self, user_id: str, prompt: str, response: str):
        """
        Logs a user prompt and its corresponding AI response to the database.

        Args:
            user_id: A unique identifier for the user.
            prompt: The prompt sent by the user.
            response: The response generated by the AI.
        
        Returns:
            True if logging was successful, False otherwise.
        """
        if not self.conn:
            print("Cannot log conversation, no database connection.")
            return False

        insert_query = """
        INSERT INTO conversations (user_id, prompt, response) 
        VALUES (%s, %s, %s);
        """
        try:
            with self.conn.cursor() as cursor:
                cursor.execute(insert_query, (user_id, prompt, response))
                self.conn.commit()
                print(f"Successfully logged conversation for user: {user_id}")
                return True
        except Exception as e:
            print(f"Error logging conversation: {e}")
            self.conn.rollback() # Roll back the transaction on error
            return False

    def close_connection(self):
        """
        Closes the database connection.
        """
        if self.conn:
            self.conn.close()
            print("PostgreSQL database connection closed.")
